name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Cancel any in-progress CI runs for a PR if it is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true


# Use bash also on Windows (instead of pwsh)
defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: | 
        sudo apt-get install \
          libavfilter-dev \
          libavformat-dev \
          libavcodec-dev \
          libswresample-dev \
          libavutil-dev\
          -y

    - name: Install dependencies (Windows)
      if: ${{ matrix.os == 'windows-2022' }}
      run: | 
        curl -L https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2022-12-05-12-37/ffmpeg-n5.1.2-8-g5746987bad-win64-lgpl-shared-5.1.zip --output ffmpeg.zip
        unzip ffmpeg.zip
        mv ffmpeg*-shared-* ffmpeg
          
    - uses: Jimver/cuda-toolkit@v0.2.8
      id: cuda-toolkit
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      with:
        cuda: '11.7.0'
        sub-packages: '["nvcc", "nvtx", "cudart"]'
        method: "network"

    - uses: Jimver/cuda-toolkit@v0.2.8
      id: cuda-toolkit-win
      if: ${{ matrix.os == 'windows-2022' }}
      with:
        cuda: '11.7.0'
        # https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#install-cuda-software
        #sub-packages: ${{matrix.os == 'windows-2022' && '["nvcc", "nvtx", "cudart", "npp_dev", "Display.Driver"]' || '["nvcc", "nvtx", "cudart", "npp_dev"]'}} # Driver needed for nvcuvid
        #method: "network"

    - name: Install CUVID
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: | 
        # normally you would install them via `apt install cuda`
        sudo apt-get install \
          libnpp-dev-11-7 \
          libnvidia-decode-520 \
          -y

    - name: Build and Install Package
      env:
        SKBUILD_CONFIGURE_OPTIONS: "-DTC_NVCUVID_LIBRARY_DIR= -DTC_FFMPEG_LIBRARY_DIR=./ffmpeg/lib -DTC_FFMPEG_INCLUDE_DIR=./ffmpeg/include"
      run: | 
        python -mpip install . --verbose

    - name: Check Import
      # Build your program with the given configuration
      #env:
        #PATH: ./ffmpeg/lib:$PATH
      run: |
        python -c "import PyNvCodec"
