name: C/C++ Continuous Integration

on: [push, pull_request]

env:
  CMAKE_VERSION: 3.16.2
  BUILD_TYPE: Release
  CCACHE_VERSION: 3.7.7

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu Latest GCC",
              artifact: "Linux.tar.xz",
              os: ubuntu-latest,
              cc: "gcc",
              cxx: "g++",
            }

    steps:
      - uses: actions/checkout@v1

      - name: Set up CUDA SDK
        id: download_cuda_sdk
        shell: bash
        run: |
          sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
          wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
          sudo dpkg -i cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
          sudo apt-get update -qq
          sudo apt-get install -y -qq --no-install-recommends cuda-toolkit-10-2

      - name: Set up FFmpeg
        id: setup_ffmpeg
        shell: bash
        run: |
          sudo apt-get install nasm
          git clone https://github.com/FFmpeg/FFmpeg.git
          cd FFmpeg

          ./configure \
           --disable-doc \
           --disable-programs \
           --disable-static \
           --enable-shared
          
          make -j -s 
          sudo make install

      - name: Set up CMake
        id: download_cmake
        shell: cmake -P {0}
        run: |
          set(cmake_version $ENV{CMAKE_VERSION})
          message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
          if ("${{ runner.os }}" STREQUAL "Linux")
            set(cmake_suffix "Linux-x86_64.tar.gz")
            set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
          endif()
          set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
          file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
          message("::set-output name=cmake_dir::${cmake_dir}")
          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x ${cmake_dir}/cmake
            )
          endif()
      - name: CMake Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          set(path_separator ":")
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
          execute_process(
            COMMAND ${{ steps.download_cmake.outputs.cmake_dir }}/cmake
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -D CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - name: CMake Build
        shell: cmake -P {0}
        run: |
          set(path_separator ":")
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
          execute_process(
            COMMAND ${{ steps.download_cmake.outputs.cmake_dir }}/cmake --build build
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
          execute_process(COMMAND ccache -s)
      - name: Install Strip
        run: ${{ steps.download_cmake.outputs.cmake_dir }}/cmake --install build --prefix instdir --strip
